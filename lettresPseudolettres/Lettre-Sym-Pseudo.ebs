'
'
'
'	W:\00 Experiences\Julien Barra\_01 Article 1 Lettres + Mots [FINI]\01 Lettres Isolees Minuscules\00 Expérience\Lettre-Sym-Pseudo.ebs
'	Generated on: 3/3/2017	11:09:11
'
'
'	This file generated with E-Studio interface.
'	E-Prime Copyright © 1996-2005 Psychology Software Tools.
'	ALL RIGHTS RESERVED
'
'	Legal use of this experiment script requires a full E-Prime or Runtime License.
'
'
'	Author:
'		BN (Paris5)
'
'
'
'

Option CStrings On
Dim ebContext as Context


'--------------------------------------------------------------------------
' Class Declarations
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
'InitTextDisplayDefaults
'--------------------------------------------------------------------------
Sub InitTextDisplayDefaults(theTextDisplay As TextDisplay)

	If theTextDisplay Is Nothing Then Exit Sub

	theTextDisplay.X = "center"
	theTextDisplay.Y = "center"
	theTextDisplay.Width = "100%"
	theTextDisplay.Height = "100%"
	theTextDisplay.ForeColor = CColor("black")
	theTextDisplay.BackColor = CColor("white")
	theTextDisplay.BackStyle = "opaque"
	theTextDisplay.BorderColor = CColor("black")
	theTextDisplay.BorderWidth = CLng("0")
	theTextDisplay.XAlign = "center"
	theTextDisplay.YAlign = "center"
	theTextDisplay.AlignHorizontal = "center"
	theTextDisplay.AlignVertical = "center"
	theTextDisplay.WordWrap = True
	theTextDisplay.ClearAfter = CLogical("No")
	theTextDisplay.FontName = "Courier New"
	theTextDisplay.FontSize = "18"
	theTextDisplay.FontBold = CLogical("Yes")
	theTextDisplay.FontItalic = CLogical("No")
	theTextDisplay.FontUnderline = CLogical("No")
	theTextDisplay.FontStrikeout = CLogical("No")

End Sub





'--------------------------------------------------------------------------
'InitSlideStateDefaults
'--------------------------------------------------------------------------
Sub InitSlideStateDefaults(theSlideState As SlideState)

	If theSlideState Is Nothing Then Exit Sub

	theSlideState.X = "center"
	theSlideState.Y = "center"
	theSlideState.Width = "100%"
	theSlideState.Height = "100%"
	theSlideState.BackColor = CColor("white")
	theSlideState.BackStyle = "opaque"
	theSlideState.BorderColor = CColor("black")
	theSlideState.BorderWidth = CLng("0")
	theSlideState.XAlign = "center"
	theSlideState.YAlign = "center"
	theSlideState.ClearAfter = CLogical("No")
	theSlideState.Enabled = CLogical("Yes")

End Sub

'--------------------------------------------------------------------------
'InitSlideVisualStimDefaults
'--------------------------------------------------------------------------
Sub InitSlideVisualStimDefaults(theSlideVisualStim As SlideVisualStim)

	If theSlideVisualStim Is Nothing Then Exit Sub

	theSlideVisualStim.X = "center"
	theSlideVisualStim.Y = "center"
	theSlideVisualStim.Width = "25%"
	theSlideVisualStim.Height = "25%"
	theSlideVisualStim.ForeColor = CColor("black")
	theSlideVisualStim.BackColor = CColor("white")
	theSlideVisualStim.BackStyle = "opaque"
	theSlideVisualStim.BorderColor = CColor("black")
	theSlideVisualStim.BorderWidth = CLng("0")
	theSlideVisualStim.XAlign = "center"
	theSlideVisualStim.YAlign = "center"
	theSlideVisualStim.AlignHorizontal = "center"
	theSlideVisualStim.AlignVertical = "center"

End Sub

'--------------------------------------------------------------------------
'InitSlideTextDefaults
'--------------------------------------------------------------------------
Sub InitSlideTextDefaults(theSlideText As SlideText)

	If theSlideText Is Nothing Then Exit Sub

	InitSlideVisualStimDefaults theSlideText

	theSlideText.WordWrap = True
	theSlideText.FontName = "Courier New"
	theSlideText.FontSize = "18"
	theSlideText.FontBold = CLogical("Yes")
	theSlideText.FontItalic = CLogical("No")
	theSlideText.FontUnderline = CLogical("No")
	theSlideText.FontStrikeout = CLogical("No")

End Sub

'--------------------------------------------------------------------------
'InitSlideImageDefaults
'--------------------------------------------------------------------------
Sub InitSlideImageDefaults(theSlideImage As SlideImage)

	If theSlideImage Is Nothing Then Exit Sub

	InitSlideVisualStimDefaults theSlideImage

	theSlideImage.Stretch = CLogical("No")
	theSlideImage.MirrorLeftRight = CLogical("No")
	theSlideImage.MirrorUpDown = CLogical("No")
	theSlideImage.UseSourceColorKey = CLogical("No")
	theSlideImage.SourceColorKey = CColor("black")

End Sub

'--------------------------------------------------------------------------
'InitSlideSoundBufferDefaults
'--------------------------------------------------------------------------
Sub InitSlideSoundBufferDefaults(theSoundBuffer As SoundBuffer)

	If theSoundBuffer Is Nothing Then Exit Sub

	theSoundBuffer.Loop = CLogical("No")
	theSoundBuffer.StopAfter = CLogical("Yes")
	theSoundBuffer.StartOffset = "0"
	theSoundBuffer.StopOffset = "0"

End Sub



















'--------------------------------------------------------------------------
' Instance Declarations
'--------------------------------------------------------------------------
Dim Display As DisplayDevice
Dim Sound As SoundDevice
Dim Keyboard As KeyboardDevice
Dim Mouse As MouseDevice
Dim SessionProc As Procedure

Dim Consignes As TextDisplay
Dim ConsignesEchoClients As EchoClientCollection

Dim List1 As List

Dim Slide1 As Slide
Dim Slide1_State As SlideState
Dim Slide1_SlideImage As SlideImage

Dim PointFix As TextDisplay

Dim Attente1 As TextDisplay

Dim SessionTrial As Procedure

Dim TextDisplay4 As TextDisplay

Dim Reponse As TextDisplay
Dim ReponseEchoClients As EchoClientCollection

Dim Pause As TextDisplay
Dim PauseEchoClients As EchoClientCollection

Dim Attente As TextDisplay

Dim List5 As List

Dim DebutManip As TextDisplay

Dim SessionTrialTraining As Procedure

Dim TextDisplay6 As TextDisplay

Dim TextDisplay7 As TextDisplay

Dim Slide2 As Slide
Dim Slide2_State As SlideState
Dim Slide2_SlideImage As SlideImage

Dim ReponseTrain As TextDisplay
Dim ReponseTrainEchoClients As EchoClientCollection

Dim TextDisplay9 As TextDisplay
Dim TextDisplay9EchoClients As EchoClientCollection

Dim FeedbackDisplay1 As FeedbackDisplay
Dim FeedbackDisplay1_State As SlideState
Dim FeedbackDisplay1_SlideText As SlideText

Dim Choix As TextDisplay
Dim ChoixEchoClients As EchoClientCollection

Dim TextDisplay2 As TextDisplay

Dim List2 As List

Dim List3 As List



'--------------------------------------------------------------------------
' Package Declare Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' User Script
'--------------------------------------------------------------------------
Dim CountEssai As Integer
Dim CountSession As Integer
Dim Ident As Integer
Dim NbIdent As Integer
Dim Diff As Integer
Dim NbDiff As Integer
Dim MoyDiff As Double
Dim MoyIdent As Double


'--------------------------------------------------------------------------
' Package Global Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Package Routines
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Implementation
'--------------------------------------------------------------------------
Sub SessionProc_Run(c as Context)
	
	
	Consignes.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		ConsignesEchoClients.RemoveAll
		Consignes.InputMasks.Add Keyboard.CreateInputMask("{ANY}", "", CLng(Consignes.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	Consignes.Run
	
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Label1:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Label1Resume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Label1Resume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Label1 END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	List5.Run c
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine3 BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	If Ident = 0 Then
 Ident = 0.1
End If
If Diff = 0 Then
 Diff = 0.1
End If


MoyIdent = (Ident / NbIdent)
MoyDiff = (Diff / NbDiff)
'Choix.Text = "Vous avez fait  " & CInt((FeedbackDisplay1.ACCStats.Mean)*100) & "% de bonnes réponses\n\n Identiques: " & CInt((MoyIdent)*100) &" Diff: " & CInt((MoyDiff)*100) &  Choix.Text
Choix.Text = "Vous avez fait  " & CInt((FeedbackDisplay1.ACCStats.Mean)*100) & "% de bonnes réponses\n Identiques: " & CInt((MoyIdent)*100) &"% Diff: " & CInt((MoyDiff)*100) & "%\n\n" & Choix.Text
Diff = 0
Ident = 0
NbDiff = 0
NbIdent = 0

FeedbackDisplay1.Reset


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine3 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	Choix.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		ChoixEchoClients.RemoveAll
		Choix.InputMasks.Add Keyboard.CreateInputMask("on", "", CLng(Choix.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	Choix.Run
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine4 BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	If Choix.RESP = "o" Then
    Goto Label1
'ElseIf choix.RESP = "n" Then
'    Goto Label2
End If 
CountSession = 1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine4 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	DebutManip.Run
	List1.Run c
	List2.Run c
	List3.Run c
	
	TextDisplay4.Run

	 


#If RUNTIME_VERSION_MAJOR > 1  Or (RUNTIME_VERSION_MAJOR = 1 And RUNTIME_VERSION_MINOR >= 2) Then
	' Log clock timing information
	c.SetAttrib "Clock.Information", Clock.Information
#End If


	c.Log
End Sub



Sub SessionTrial_Run(c as Context)
	
	Attente1.Run
	
	PointFix.Run
	
	
	Select Case Slide1.ActiveState
		Case "Default"


			Set Slide1_SlideImage = CSlideImage(Slide1.States.Item("Default").Objects(1))
			Slide1_SlideImage.Filename = "stimuli/" &_ 
				c.GetAttrib("StimDroit") &_ 
				".bmp"
			Slide1_SlideImage.Load
			Set Slide1_SlideImage = Nothing

			Set Slide1_SlideImage = CSlideImage(Slide1.States.Item("Default").Objects(2))
			Slide1_SlideImage.Filename = "stimuli/" &_ 
				c.GetAttrib("StimGauche") &_ 
				".bmp"
			Slide1_SlideImage.Load
			Set Slide1_SlideImage = Nothing
	End Select

	Slide1.Run
	
	
	
	Reponse.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		ReponseEchoClients.RemoveAll
		Reponse.InputMasks.Add Keyboard.CreateInputMask("{LEFTARROW}{RIGHTARROW}{DOWNARROW}", c.GetAttrib("CorrectAnswer"), CLng(Reponse.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	Reponse.Run
	c.SetAttrib Reponse.Name & ".OnsetDelay", Reponse.OnsetDelay
	c.SetAttrib Reponse.Name & ".OnsetTime", Reponse.OnsetTime
	c.SetAttrib Reponse.Name & ".DurationError", Reponse.DurationError
	c.SetAttrib Reponse.Name & ".RTTime", Reponse.RTTime
	c.SetAttrib Reponse.Name & ".ACC", Reponse.ACC
	c.SetAttrib Reponse.Name & ".RT", Reponse.RT
	c.SetAttrib Reponse.Name & ".RESP", Reponse.RESP
	c.SetAttrib Reponse.Name & ".CRESP", Reponse.CRESP
	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	CountEssai=CountEssai+1

if  CountEssai=108 and CountSession <6 then

Pause.Text = ""
Pause.Text = "C\'est la pause n°" & CountSession & "\n\n"
Pause.Text = Pause.Text & "Appuyez sur la barre d\'espace pour continuer\n\n"
CountEssai = 0
CountSession = CountSession + 1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	
	
	Pause.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		PauseEchoClients.RemoveAll
		Pause.InputMasks.Add Keyboard.CreateInputMask("{SPACE}", "", CLng(Pause.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	Pause.Run
	
	Attente.Run
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine2 BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	End If

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine2 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	c.SetAttrib Reponse.Name & ".OnsetDelay", Reponse.OnsetDelay
	c.SetAttrib Reponse.Name & ".OnsetTime", Reponse.OnsetTime
	c.SetAttrib Reponse.Name & ".DurationError", Reponse.DurationError
	c.SetAttrib Reponse.Name & ".RTTime", Reponse.RTTime
	c.SetAttrib Reponse.Name & ".ACC", Reponse.ACC
	c.SetAttrib Reponse.Name & ".RT", Reponse.RT
	c.SetAttrib Reponse.Name & ".RESP", Reponse.RESP
	c.SetAttrib Reponse.Name & ".CRESP", Reponse.CRESP
	

	c.Log
End Sub

Sub SessionTrialTraining_Run(c as Context)
	
	TextDisplay6.Run
	
	TextDisplay7.Run
	
	
	Select Case Slide2.ActiveState
		Case "Default"


			Set Slide2_SlideImage = CSlideImage(Slide2.States.Item("Default").Objects(1))
			Slide2_SlideImage.Filename = "stimtraining/" &_ 
				c.GetAttrib("StimDroit") &_ 
				".bmp"
			Slide2_SlideImage.Load
			Set Slide2_SlideImage = Nothing

			Set Slide2_SlideImage = CSlideImage(Slide2.States.Item("Default").Objects(2))
			Slide2_SlideImage.Filename = "stimtraining/" &_ 
				c.GetAttrib("StimGauche") &_ 
				".bmp"
			Slide2_SlideImage.Load
			Set Slide2_SlideImage = Nothing
	End Select

	Slide2.Run
	
	
	
	ReponseTrain.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		ReponseTrainEchoClients.RemoveAll
		ReponseTrain.InputMasks.Add Keyboard.CreateInputMask("{LEFTARROW}{RIGHTARROW}{DOWNARROW}", c.GetAttrib("CorrectAnswer"), CLng(ReponseTrain.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	ReponseTrain.Run
	c.SetAttrib ReponseTrain.Name & ".OnsetDelay", ReponseTrain.OnsetDelay
	c.SetAttrib ReponseTrain.Name & ".OnsetTime", ReponseTrain.OnsetTime
	c.SetAttrib ReponseTrain.Name & ".DurationError", ReponseTrain.DurationError
	c.SetAttrib ReponseTrain.Name & ".RTTime", ReponseTrain.RTTime
	c.SetAttrib ReponseTrain.Name & ".ACC", ReponseTrain.ACC
	c.SetAttrib ReponseTrain.Name & ".RT", ReponseTrain.RT
	c.SetAttrib ReponseTrain.Name & ".RESP", ReponseTrain.RESP
	c.SetAttrib ReponseTrain.Name & ".CRESP", ReponseTrain.CRESP
	
	
	
	If ReponseTrain.ACC = 1 Then
		'Set the ActiveState to Correct
		FeedbackDisplay1.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		FeedbackDisplay1.AccStats.AddObservation ReponseTrain.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(ReponseTrain.RESP) > 0 Then
			FeedbackDisplay1.RTStats.AddObservation ReponseTrain.RT
			FeedbackDisplay1.CorrectRTStats.AddObservation ReponseTrain.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(ReponseTrain.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			FeedbackDisplay1.ActiveState = "Incorrect"

			'Set the accuracy stats
			FeedbackDisplay1.AccStats.AddObservation ReponseTrain.Acc

			'Set the RT stats
			FeedbackDisplay1.RTStats.AddObservation ReponseTrain.RT
			FeedbackDisplay1.IncorrectRTStats.AddObservation ReponseTrain.RT
		Else
			'Set the ActiveState to NoResponse
			FeedbackDisplay1.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If FeedbackDisplay1.CollectNoRespACCStats = True Then
				FeedbackDisplay1.AccStats.AddObservation ReponseTrain.Acc
			End If
		End If
	End If

	Select Case FeedbackDisplay1.ActiveState
		Case "Correct"


			Set FeedbackDisplay1_SlideText = CSlideText(FeedbackDisplay1.States.Item("Correct").Objects(1))
			FeedbackDisplay1_SlideText.Text = "" & _
		Format$((FeedbackDisplay1.ACCStats.Mean / FeedbackDisplay1.ACCDivisor),FeedbackDisplay1.ACCFormat) & _
		" Average Percent Correct"
			Set FeedbackDisplay1_SlideText = Nothing

			Set FeedbackDisplay1_SlideText = CSlideText(FeedbackDisplay1.States.Item("Correct").Objects(2))
			Set FeedbackDisplay1_SlideText = Nothing
		Case "Incorrect"


			Set FeedbackDisplay1_SlideText = CSlideText(FeedbackDisplay1.States.Item("Incorrect").Objects(1))
			FeedbackDisplay1_SlideText.Text = "" & _
		Format$((FeedbackDisplay1.ACCStats.Mean / FeedbackDisplay1.ACCDivisor),FeedbackDisplay1.ACCFormat) & _
		" Average Percent Correct"
			Set FeedbackDisplay1_SlideText = Nothing

			Set FeedbackDisplay1_SlideText = CSlideText(FeedbackDisplay1.States.Item("Incorrect").Objects(2))
			Set FeedbackDisplay1_SlideText = Nothing
		Case "NoResponse"


			Set FeedbackDisplay1_SlideText = CSlideText(FeedbackDisplay1.States.Item("NoResponse").Objects(1))
			Set FeedbackDisplay1_SlideText = Nothing
		Case "Pending"

	End Select

	

	FeedbackDisplay1.Run

	
	
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine5 BEGIN
	'''''''''''''''''''''''''''''''''''''''''''''
	If c.GetAttrib("Type") = "Identique" Then
    Ident = Ident + ReponseTrain.ACC
    NbIdent = NbIdent +1
Else
	Diff = Diff + ReponseTrain.ACC
	NbDiff = NbDiff +1
End If
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine5 END
	'''''''''''''''''''''''''''''''''''''''''''''
	
	c.SetAttrib ReponseTrain.Name & ".OnsetDelay", ReponseTrain.OnsetDelay
	c.SetAttrib ReponseTrain.Name & ".OnsetTime", ReponseTrain.OnsetTime
	c.SetAttrib ReponseTrain.Name & ".DurationError", ReponseTrain.DurationError
	c.SetAttrib ReponseTrain.Name & ".RTTime", ReponseTrain.RTTime
	c.SetAttrib ReponseTrain.Name & ".ACC", ReponseTrain.ACC
	c.SetAttrib ReponseTrain.Name & ".RT", ReponseTrain.RT
	c.SetAttrib ReponseTrain.Name & ".RESP", ReponseTrain.RESP
	c.SetAttrib ReponseTrain.Name & ".CRESP", ReponseTrain.CRESP
	

	c.Log
End Sub







'--------------------------------------------------------------------------
' InitDevices
'
'--------------------------------------------------------------------------
Sub InitDevices(c As Context)



	SetOSThreadPriority 3


	Set Display = New DisplayDevice
	Display.Name = "Display"

	Dim DisplayDisplayDeviceInfo As DisplayDeviceInfo
	DisplayDisplayDeviceInfo.XRes = 1024
	DisplayDisplayDeviceInfo.YRes = 768
	DisplayDisplayDeviceInfo.ColorDepth = 16
	DisplayDisplayDeviceInfo.RefreshRate = 0
	DisplayDisplayDeviceInfo.NumPages = 0
	
	'Load values from context if they exist
	If c.AttribExists(Display.Name & ".XRes") Then DisplayDisplayDeviceInfo.XRes = CLng(c.GetAttrib(Display.Name & ".XRes"))
	If c.AttribExists(Display.Name & ".YRes") Then DisplayDisplayDeviceInfo.YRes = CLng(c.GetAttrib(Display.Name & ".YRes"))
	If c.AttribExists(Display.Name & ".ColorDepth") Then DisplayDisplayDeviceInfo.ColorDepth = CLng(c.GetAttrib(Display.Name & ".ColorDepth"))

	'Open the device, unless the context values indicate otherwise
	Dim DisplayOpen As Boolean
	DisplayOpen = True
	If c.AttribExists(Display.Name & ".Open") Then DisplayOpen = CLogical(c.GetAttrib(Display.Name & ".Open"))
	If DisplayOpen = True Then
		Display.Open DisplayDisplayDeviceInfo
		c.SetAttrib Display.Name & ".RefreshRate", Format$(Display.CalculatedRefreshRate, "0.000")
	End If

	Set Sound = New SoundDevice
	Sound.Name = "Sound"

	Dim SoundSoundOutDeviceInfo As SoundDeviceInfo
	SoundSoundOutDeviceInfo.Channels = 2
	SoundSoundOutDeviceInfo.SamplesPerSecond = 22050
	SoundSoundOutDeviceInfo.BitsPerSample = 16
	'Load values from context if they exist
	If c.AttribExists(Sound.Name & ".Channels") Then SoundSoundOutDeviceInfo.Channels = CLng(c.GetAttrib(Sound.Name & ".Channels"))
	If c.AttribExists(Sound.Name & ".SamplesPerSecond") Then SoundSoundOutDeviceInfo.SamplesPerSecond = CLng(c.GetAttrib(Sound.Name & ".SamplesPerSecond"))
	If c.AttribExists(Sound.Name & ".BitsPerSample") Then SoundSoundOutDeviceInfo.BitsPerSample = CLng(c.GetAttrib(Sound.Name & ".BitsPerSample"))

	Set Keyboard = New KeyboardDevice
	Keyboard.Name = "Keyboard"

	Dim KeyboardKeyboardDeviceInfo as KeyboardDeviceInfo
	KeyboardKeyboardDeviceInfo.CollectionMode = ebPressesOnly
	KeyboardKeyboardDeviceInfo.CapsLock = ebCapsLockOff
	KeyboardKeyboardDeviceInfo.NumLock = ebNumLockOn
	'Load values from context if they exist
	If c.AttribExists(Keyboard.Name & ".CollectionMode") Then KeyboardKeyboardDeviceInfo.CollectionMode = CLng(c.GetAttrib(Keyboard.Name & ".CollectionMode"))
	If c.AttribExists(Keyboard.Name & ".CapsLock") Then KeyboardKeyboardDeviceInfo.CapsLock = CLng(c.GetAttrib(Keyboard.Name & ".CapsLock"))
	If c.AttribExists(Keyboard.Name & ".NumLock") Then KeyboardKeyboardDeviceInfo.NumLock = CLng(c.GetAttrib(Keyboard.Name & ".NumLock"))
	If c.AttribExists(Keyboard.Name & ".EmulateDeviceName") Then KeyboardKeyboardDeviceInfo.EmulateDeviceName = c.GetAttrib(Keyboard.Name & ".EmulateDeviceName")

	'Open the device, unless the context values indicate otherwise
	Dim KeyboardOpen As Boolean
	KeyboardOpen = True
	If c.AttribExists(Keyboard.Name & ".Open") Then KeyboardOpen = CLogical(c.GetAttrib(Keyboard.Name & ".Open"))
	If KeyboardOpen = True Then
		Keyboard.Open KeyboardKeyboardDeviceInfo
	End If

	Set Mouse = New MouseDevice
	Mouse.Name = "Mouse"

	Dim MouseMouseDeviceInfo as MouseDeviceInfo
	MouseMouseDeviceInfo.OpenMode = ebMouseOpenModeDirect
	MouseMouseDeviceInfo.CollectionMode = ebPressesOnly
	MouseMouseDeviceInfo.ShowCursor = False
	'Load values from context if they exist
	If c.AttribExists(Mouse.Name & ".OpenMode") Then MouseMouseDeviceInfo.OpenMode = CLng(c.GetAttrib(Mouse.Name & ".OpenMode"))
	If c.AttribExists(Mouse.Name & ".CollectionMode") Then MouseMouseDeviceInfo.CollectionMode = CLng(c.GetAttrib(Mouse.Name & ".CollectionMode"))
	If c.AttribExists(Mouse.Name & ".ShowCursor") Then MouseMouseDeviceInfo.ShowCursor = CLogical(c.GetAttrib(Mouse.Name & ".ShowCursor"))
	If c.AttribExists(Mouse.Name & ".EmulateDeviceName") Then MouseMouseDeviceInfo.EmulateDeviceName = c.GetAttrib(Mouse.Name & ".EmulateDeviceName")

	'Open the device, unless the context values indicate otherwise
	Dim MouseOpen As Boolean
	MouseOpen = True
	If c.AttribExists(Mouse.Name & ".Open") Then MouseOpen = CLogical(c.GetAttrib(Mouse.Name & ".Open"))
	If MouseOpen = True Then
		Mouse.Open MouseMouseDeviceInfo
	End If


	SetOSThreadPriority 0

End Sub



'--------------------------------------------------------------------------
' InitObjects
'
'--------------------------------------------------------------------------
Sub InitObjects(c As Context)

	Set SessionProc = New Procedure
	SessionProc.Name = "SessionProc"
	SessionProc.Tag = ""
	SessionProc.Subroutine = "SessionProc_Run"

	Set Consignes = New TextDisplay
	Consignes.Name = "Consignes"
	Consignes.Tag = ""

	Set ConsignesEchoClients = New EchoClientCollection

	InitTextDisplayDefaults Consignes

	Consignes.Text = "Vous allez voir un point de fixation que vous devrez fixer. Ensuite vous allez voir deux stimuli apparaître à l'écran.\n\nVous devrez décider quel sti" &_ 
				"mulus est le plus grand (le plus haut):\n\n-si c'est le stimulus gauche en appuyant sur la flêche gauche\n\n-si c'est le stimulus droit en appuyant su" &_ 
				"r la flêche droite\n\n-s'ils sont de taille identique en appuyant sur la flêche vers le bas\n\nNous allons commencer par un petit entraînement.\n\nPou" &_ 
				"r continuer appuyez sur la barre d'espace"
	Consignes.Duration = CLng("-1")
	Consignes.TimingMode = ebTimingModeEvent
	Consignes.PreRelease = Val("0")

	Consignes.OnsetSync = 1
	Consignes.OffsetSync = 0

	Set List1 = New List
	List1.Name = "List1"
	List1.Tag = ""

	'Initialization for List1
	
	Set List1.Order = New RandomOrder
	Set List1.Deletion = NoDeletion
	List1.ResetEveryRun = False

	' Create the column headings
	List1.AddAttrib "Essai"
	List1.AddAttrib "Lettre"
	List1.AddAttrib "StimGauche"
	List1.AddAttrib "StimDroit"
	List1.AddAttrib "TypeGauche"
	List1.AddAttrib "TypeDroite"
	List1.AddAttrib "TailleGauche"
	List1.AddAttrib "TailleDroite"
	List1.AddAttrib "CorrectAnswer"
	List1.Filename = ""
	List1.LoadMethod = ebLoadMethodEmbedded

	List1.Load

	Set List1.TerminateCondition = Cycles(1)
	Set List1.ResetCondition = Samples(216)
	List1.Reset
	
	Set Slide1 = New Slide
	Slide1.Name = "Slide1"
	Slide1.Tag = ""
	Slide1.Duration = CLng("700")
	Slide1.TimingMode = ebTimingModeEvent
	Slide1.PreRelease = Val("0")

	Slide1.OnsetSync = 1
	Slide1.OffsetSync = 0

	Set Slide1_State = New SlideState
	Slide1_State.Name = "Default"

	InitSlideStateDefaults Slide1_State


	Slide1.States.Add Slide1_State, "Default"


	Set Slide1_SlideImage = New SlideImage
	Slide1_SlideImage.Name = "Image2"

	InitSlideImageDefaults Slide1_SlideImage

	Slide1_SlideImage.X = "538"
	Slide1_SlideImage.Width = "21"
	Slide1_SlideImage.Height = "17"
	Slide1.States.Item("Default").Objects.Add Slide1_SlideImage, "Image2"

	Set Slide1_SlideImage = New SlideImage
	Slide1_SlideImage.Name = "Image1"

	InitSlideImageDefaults Slide1_SlideImage

	Slide1_SlideImage.X = "478"
	Slide1_SlideImage.Width = "21"
	Slide1_SlideImage.Height = "17"
	Slide1.States.Item("Default").Objects.Add Slide1_SlideImage, "Image1"
	Slide1.ActiveState = "Default"

	Set PointFix = New TextDisplay
	PointFix.Name = "PointFix"
	PointFix.Tag = ""

	InitTextDisplayDefaults PointFix

	PointFix.Text = "+"
	PointFix.Duration = CLng("200")
	PointFix.TimingMode = ebTimingModeEvent
	PointFix.PreRelease = Val("0")

	PointFix.OnsetSync = 1
	PointFix.OffsetSync = 0

	Set Attente1 = New TextDisplay
	Attente1.Name = "Attente1"
	Attente1.Tag = ""

	InitTextDisplayDefaults Attente1

	Attente1.Text = ""
	Attente1.Duration = CLng("750")
	Attente1.TimingMode = ebTimingModeEvent
	Attente1.PreRelease = Val("0")

	Attente1.OnsetSync = 1
	Attente1.OffsetSync = 0

	Set SessionTrial = New Procedure
	SessionTrial.Name = "SessionTrial"
	SessionTrial.Tag = ""
	SessionTrial.Subroutine = "SessionTrial_Run"

	Set TextDisplay4 = New TextDisplay
	TextDisplay4.Name = "TextDisplay4"
	TextDisplay4.Tag = ""

	InitTextDisplayDefaults TextDisplay4

	TextDisplay4.Text = "Merci pour votre participation !"
	TextDisplay4.Duration = CLng("1000")
	TextDisplay4.TimingMode = ebTimingModeEvent
	TextDisplay4.PreRelease = Val("0")

	TextDisplay4.OnsetSync = 1
	TextDisplay4.OffsetSync = 0

	Set Reponse = New TextDisplay
	Reponse.Name = "Reponse"
	Reponse.Tag = ""

	Set ReponseEchoClients = New EchoClientCollection

	InitTextDisplayDefaults Reponse

	Reponse.Text = ""
	Reponse.Duration = CLng("-1")
	Reponse.TimingMode = ebTimingModeEvent
	Reponse.PreRelease = Val("0")

	Reponse.OnsetSync = 1
	Reponse.OffsetSync = 0

	Set Pause = New TextDisplay
	Pause.Name = "Pause"
	Pause.Tag = ""

	Set PauseEchoClients = New EchoClientCollection

	InitTextDisplayDefaults Pause

	Pause.Text = ""
	Pause.Duration = CLng("-1")
	Pause.TimingMode = ebTimingModeEvent
	Pause.PreRelease = Val("0")

	Pause.OnsetSync = 1
	Pause.OffsetSync = 0

	Set Attente = New TextDisplay
	Attente.Name = "Attente"
	Attente.Tag = ""

	InitTextDisplayDefaults Attente

	Attente.Text = ""
	Attente.Duration = CLng("1000")
	Attente.TimingMode = ebTimingModeEvent
	Attente.PreRelease = Val("0")

	Attente.OnsetSync = 1
	Attente.OffsetSync = 0

	Set List5 = New List
	List5.Name = "List5"
	List5.Tag = ""

	'Initialization for List5
	
	Set List5.Order = New RandomOrder
	Set List5.Deletion = NoDeletion
	List5.ResetEveryRun = False

	' Create the column headings
	List5.AddAttrib "Essai"
	List5.AddAttrib "Lettre"
	List5.AddAttrib "StimGauche"
	List5.AddAttrib "StimDroit"
	List5.AddAttrib "TypeCible"
	List5.AddAttrib "PosLettreRef"
	List5.AddAttrib "TailleRef"
	List5.AddAttrib "TailleCible"
	List5.AddAttrib "CorrectAnswer"
	List5.AddAttrib "Type"
	List5.Filename = ""
	List5.LoadMethod = ebLoadMethodEmbedded

	List5.Load

	Set List5.TerminateCondition = Cycles(1)
	Set List5.ResetCondition = Samples(12)
	List5.Reset
	
	Set DebutManip = New TextDisplay
	DebutManip.Name = "DebutManip"
	DebutManip.Tag = ""

	InitTextDisplayDefaults DebutManip

	DebutManip.Text = ""
	DebutManip.Duration = CLng("1000")
	DebutManip.TimingMode = ebTimingModeEvent
	DebutManip.PreRelease = Val("0")

	DebutManip.OnsetSync = 1
	DebutManip.OffsetSync = 0

	Set SessionTrialTraining = New Procedure
	SessionTrialTraining.Name = "SessionTrialTraining"
	SessionTrialTraining.Tag = ""
	SessionTrialTraining.Subroutine = "SessionTrialTraining_Run"

	Set TextDisplay6 = New TextDisplay
	TextDisplay6.Name = "TextDisplay6"
	TextDisplay6.Tag = ""

	InitTextDisplayDefaults TextDisplay6

	TextDisplay6.Text = ""
	TextDisplay6.Duration = CLng("750")
	TextDisplay6.TimingMode = ebTimingModeEvent
	TextDisplay6.PreRelease = Val("0")

	TextDisplay6.OnsetSync = 1
	TextDisplay6.OffsetSync = 0

	Set TextDisplay7 = New TextDisplay
	TextDisplay7.Name = "TextDisplay7"
	TextDisplay7.Tag = ""

	InitTextDisplayDefaults TextDisplay7

	TextDisplay7.Text = "+"
	TextDisplay7.Duration = CLng("200")
	TextDisplay7.TimingMode = ebTimingModeEvent
	TextDisplay7.PreRelease = Val("0")

	TextDisplay7.OnsetSync = 1
	TextDisplay7.OffsetSync = 0

	Set Slide2 = New Slide
	Slide2.Name = "Slide2"
	Slide2.Tag = ""
	Slide2.Duration = CLng("700")
	Slide2.TimingMode = ebTimingModeEvent
	Slide2.PreRelease = Val("0")

	Slide2.OnsetSync = 1
	Slide2.OffsetSync = 0

	Set Slide2_State = New SlideState
	Slide2_State.Name = "Default"

	InitSlideStateDefaults Slide2_State


	Slide2.States.Add Slide2_State, "Default"


	Set Slide2_SlideImage = New SlideImage
	Slide2_SlideImage.Name = "Image2"

	InitSlideImageDefaults Slide2_SlideImage

	Slide2_SlideImage.X = "538"
	Slide2_SlideImage.Width = "21"
	Slide2_SlideImage.Height = "17"
	Slide2.States.Item("Default").Objects.Add Slide2_SlideImage, "Image2"

	Set Slide2_SlideImage = New SlideImage
	Slide2_SlideImage.Name = "Image1"

	InitSlideImageDefaults Slide2_SlideImage

	Slide2_SlideImage.X = "478"
	Slide2_SlideImage.Width = "21"
	Slide2_SlideImage.Height = "17"
	Slide2.States.Item("Default").Objects.Add Slide2_SlideImage, "Image1"
	Slide2.ActiveState = "Default"

	Set ReponseTrain = New TextDisplay
	ReponseTrain.Name = "ReponseTrain"
	ReponseTrain.Tag = ""

	Set ReponseTrainEchoClients = New EchoClientCollection

	InitTextDisplayDefaults ReponseTrain

	ReponseTrain.Text = ""
	ReponseTrain.Duration = CLng("-1")
	ReponseTrain.TimingMode = ebTimingModeEvent
	ReponseTrain.PreRelease = Val("0")

	ReponseTrain.OnsetSync = 1
	ReponseTrain.OffsetSync = 0

	Set TextDisplay9 = New TextDisplay
	TextDisplay9.Name = "TextDisplay9"
	TextDisplay9.Tag = ""

	Set TextDisplay9EchoClients = New EchoClientCollection

	InitTextDisplayDefaults TextDisplay9

	TextDisplay9.Text = ""
	TextDisplay9.Duration = CLng("-1")
	TextDisplay9.TimingMode = ebTimingModeEvent
	TextDisplay9.PreRelease = Val("0")

	TextDisplay9.OnsetSync = 1
	TextDisplay9.OffsetSync = 0

	Set FeedbackDisplay1 = New FeedbackDisplay
	FeedbackDisplay1.Name = "FeedbackDisplay1"
	FeedbackDisplay1.Tag = ""

	FeedbackDisplay1.ACCDivisor = "1.0"
	FeedbackDisplay1.ACCFormat = "Percent"
	FeedbackDisplay1.RTDivisor = "1000.0"
	FeedbackDisplay1.RTFormat = "###0.000"
	FeedbackDisplay1.CorrectRTDivisor = "1000.0"
	FeedbackDisplay1.CorrectRTFormat = "###0.000"
	FeedbackDisplay1.IncorrectRTDivisor = "1000.0"
	FeedbackDisplay1.IncorrectRTFormat = "###0.000"
	FeedbackDisplay1.CollectNoRespACCStats = True
	FeedbackDisplay1.Duration = CLng("1500")
	FeedbackDisplay1.TimingMode = ebTimingModeEvent
	FeedbackDisplay1.PreRelease = Val("0")

	FeedbackDisplay1.OnsetSync = 1
	FeedbackDisplay1.OffsetSync = 0

	Set FeedbackDisplay1_State = New SlideState
	FeedbackDisplay1_State.Name = "Correct"

	InitSlideStateDefaults FeedbackDisplay1_State


	FeedbackDisplay1.States.Add FeedbackDisplay1_State, "Correct"


	Set FeedbackDisplay1_SlideText = New SlideText
	FeedbackDisplay1_SlideText.Name = "Text3"

	InitSlideTextDefaults FeedbackDisplay1_SlideText

	FeedbackDisplay1_SlideText.Y = "45%"
	FeedbackDisplay1_SlideText.Width = "47%"
	FeedbackDisplay1_SlideText.Height = "10%"
	FeedbackDisplay1_SlideText.ForeColor = CColor("blue")
	FeedbackDisplay1_SlideText.BackStyle = "transparent"
	FeedbackDisplay1_SlideText.AlignHorizontal = "left"
	FeedbackDisplay1.States.Item("Correct").Objects.Add FeedbackDisplay1_SlideText, "Text3"

	Set FeedbackDisplay1_SlideText = New SlideText
	FeedbackDisplay1_SlideText.Name = "Text1"

	InitSlideTextDefaults FeedbackDisplay1_SlideText

	FeedbackDisplay1_SlideText.Text = "Correct!"
	FeedbackDisplay1_SlideText.Y = "35%"
	FeedbackDisplay1_SlideText.Width = "12%"
	FeedbackDisplay1_SlideText.Height = "8%"
	FeedbackDisplay1_SlideText.ForeColor = CColor("blue")
	FeedbackDisplay1_SlideText.BackStyle = "transparent"
	FeedbackDisplay1_SlideText.AlignHorizontal = "left"
	FeedbackDisplay1.States.Item("Correct").Objects.Add FeedbackDisplay1_SlideText, "Text1"

	Set FeedbackDisplay1_State = New SlideState
	FeedbackDisplay1_State.Name = "Incorrect"

	InitSlideStateDefaults FeedbackDisplay1_State


	FeedbackDisplay1.States.Add FeedbackDisplay1_State, "Incorrect"


	Set FeedbackDisplay1_SlideText = New SlideText
	FeedbackDisplay1_SlideText.Name = "Text3"

	InitSlideTextDefaults FeedbackDisplay1_SlideText

	FeedbackDisplay1_SlideText.Y = "45%"
	FeedbackDisplay1_SlideText.Width = "46%"
	FeedbackDisplay1_SlideText.Height = "10%"
	FeedbackDisplay1_SlideText.ForeColor = CColor("red")
	FeedbackDisplay1_SlideText.BackStyle = "transparent"
	FeedbackDisplay1_SlideText.AlignHorizontal = "left"
	FeedbackDisplay1.States.Item("Incorrect").Objects.Add FeedbackDisplay1_SlideText, "Text3"

	Set FeedbackDisplay1_SlideText = New SlideText
	FeedbackDisplay1_SlideText.Name = "Text1"

	InitSlideTextDefaults FeedbackDisplay1_SlideText

	FeedbackDisplay1_SlideText.Text = "Incorrect"
	FeedbackDisplay1_SlideText.Y = "35%"
	FeedbackDisplay1_SlideText.Width = "13%"
	FeedbackDisplay1_SlideText.Height = "10%"
	FeedbackDisplay1_SlideText.ForeColor = CColor("red")
	FeedbackDisplay1_SlideText.BackStyle = "transparent"
	FeedbackDisplay1_SlideText.AlignHorizontal = "left"
	FeedbackDisplay1.States.Item("Incorrect").Objects.Add FeedbackDisplay1_SlideText, "Text1"

	Set FeedbackDisplay1_State = New SlideState
	FeedbackDisplay1_State.Name = "NoResponse"

	InitSlideStateDefaults FeedbackDisplay1_State


	FeedbackDisplay1.States.Add FeedbackDisplay1_State, "NoResponse"


	Set FeedbackDisplay1_SlideText = New SlideText
	FeedbackDisplay1_SlideText.Name = "Text1"

	InitSlideTextDefaults FeedbackDisplay1_SlideText

	FeedbackDisplay1_SlideText.Text = "No response detected."
	FeedbackDisplay1_SlideText.Y = "20%"
	FeedbackDisplay1_SlideText.Width = "75%"
	FeedbackDisplay1_SlideText.Height = "10%"
	FeedbackDisplay1_SlideText.ForeColor = CColor("red")
	FeedbackDisplay1_SlideText.BackStyle = "transparent"
	FeedbackDisplay1_SlideText.AlignHorizontal = "left"
	FeedbackDisplay1.States.Item("NoResponse").Objects.Add FeedbackDisplay1_SlideText, "Text1"

	Set FeedbackDisplay1_State = New SlideState
	FeedbackDisplay1_State.Name = "Pending"

	InitSlideStateDefaults FeedbackDisplay1_State


	FeedbackDisplay1.States.Add FeedbackDisplay1_State, "Pending"


	Set Choix = New TextDisplay
	Choix.Name = "Choix"
	Choix.Tag = ""

	Set ChoixEchoClients = New EchoClientCollection

	InitTextDisplayDefaults Choix

	Choix.Text = "Voulez-vous recommencer l'entraînement? (o/n)"
	Choix.Duration = CLng("-1")
	Choix.TimingMode = ebTimingModeEvent
	Choix.PreRelease = Val("0")

	Choix.OnsetSync = 1
	Choix.OffsetSync = 0

	Set TextDisplay2 = New TextDisplay
	TextDisplay2.Name = "TextDisplay2"
	TextDisplay2.Tag = ""

	InitTextDisplayDefaults TextDisplay2

	TextDisplay2.Text = ""
	TextDisplay2.Duration = CLng("1000")
	TextDisplay2.TimingMode = ebTimingModeEvent
	TextDisplay2.PreRelease = Val("0")

	TextDisplay2.OnsetSync = 1
	TextDisplay2.OffsetSync = 0

	Set List2 = New List
	List2.Name = "List2"
	List2.Tag = ""

	'Initialization for List2
	
	Set List2.Order = New RandomOrder
	Set List2.Deletion = NoDeletion
	List2.ResetEveryRun = False

	' Create the column headings
	List2.AddAttrib "Essai"
	List2.AddAttrib "Lettre"
	List2.AddAttrib "StimGauche"
	List2.AddAttrib "StimDroit"
	List2.AddAttrib "TypeGauche"
	List2.AddAttrib "TypeDroite"
	List2.AddAttrib "TailleGauche"
	List2.AddAttrib "TailleDroite"
	List2.AddAttrib "CorrectAnswer"
	List2.Filename = ""
	List2.LoadMethod = ebLoadMethodEmbedded

	List2.Load

	Set List2.TerminateCondition = Cycles(1)
	Set List2.ResetCondition = Samples(216)
	List2.Reset
	
	Set List3 = New List
	List3.Name = "List3"
	List3.Tag = ""

	'Initialization for List3
	
	Set List3.Order = New RandomOrder
	Set List3.Deletion = NoDeletion
	List3.ResetEveryRun = False

	' Create the column headings
	List3.AddAttrib "Essai"
	List3.AddAttrib "Lettre"
	List3.AddAttrib "StimGauche"
	List3.AddAttrib "StimDroit"
	List3.AddAttrib "TypeGauche"
	List3.AddAttrib "TypeDroite"
	List3.AddAttrib "TailleGauche"
	List3.AddAttrib "TailleDroite"
	List3.AddAttrib "CorrectAnswer"
	List3.Filename = ""
	List3.LoadMethod = ebLoadMethodEmbedded

	List3.Load

	Set List3.TerminateCondition = Cycles(1)
	Set List3.ResetCondition = Samples(216)
	List3.Reset
	

End Sub


'--------------------------------------------------------------------------
' InitPackages
'
'--------------------------------------------------------------------------
Sub InitPackages(c As Context)

End Sub



'--------------------------------------------------------------------------
' InitGlobals
'
'--------------------------------------------------------------------------
Sub InitGlobals(c As Context)

End Sub



'--------------------------------------------------------------------------


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitGlobals
'--------------------------------------------------------------------------
Sub UnInitGlobals()
End Sub
'--------------------------------------------------------------------------
' UnInitDevices
'--------------------------------------------------------------------------
Sub UnInitDevices()
	Display.Close
	Set Display = Nothing

	Keyboard.Close
	Set Keyboard = Nothing

	Mouse.Close
	Set Mouse = Nothing

End Sub


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitPackages
'--------------------------------------------------------------------------
Sub UnInitPackages()
End Sub


'--------------------------------------------------------------------------
' UnInitObjects
'
'--------------------------------------------------------------------------
Sub UnInitObjects()

	Set SessionProc = Nothing

	Set Consignes = Nothing

	Set ConsignesEchoClients = Nothing

	Set List1 = Nothing

	Set Slide1 = Nothing

	Set PointFix = Nothing

	Set Attente1 = Nothing

	Set SessionTrial = Nothing

	Set TextDisplay4 = Nothing

	Set Reponse = Nothing

	Set ReponseEchoClients = Nothing

	Set Pause = Nothing

	Set PauseEchoClients = Nothing

	Set Attente = Nothing

	Set List5 = Nothing

	Set DebutManip = Nothing

	Set SessionTrialTraining = Nothing

	Set TextDisplay6 = Nothing

	Set TextDisplay7 = Nothing

	Set Slide2 = Nothing

	Set ReponseTrain = Nothing

	Set ReponseTrainEchoClients = Nothing

	Set TextDisplay9 = Nothing

	Set TextDisplay9EchoClients = Nothing

	Set FeedbackDisplay1 = Nothing

	Set Choix = Nothing

	Set ChoixEchoClients = Nothing

	Set TextDisplay2 = Nothing

	Set List2 = Nothing

	Set List3 = Nothing


End Sub


'--------------------------------------------------------------------------
' Main
'
'--------------------------------------------------------------------------
Sub Main()

	' Create and initialize the default context, data file,
	' and provide global access to the context.
	Dim c As Context
	Set c = New Context
	Set c.DataFile = New DataFile
	c.PushNewFrame
	Set ebContext = c

	' Set the log level names
	c.SetLogLevelName 1, "Session"
	c.SetLogLevelName 2, "Block"
	c.SetLogLevelName 3, "Trial"
	c.SetLogLevelName 4, "SubTrial"
	c.SetLogLevelName 5, "LogLevel5"
	c.SetLogLevelName 6, "LogLevel6"
	c.SetLogLevelName 7, "LogLevel7"
	c.SetLogLevelName 8, "LogLevel8"
	c.SetLogLevelName 9, "LogLevel9"
	c.SetLogLevelName 10, "LogLevel10"

	' Set standard logging items
	ebContext.SetAttrib "Experiment", "Lettre-Sym-Pseudo"
	ebContext.SetAttrib "SessionDate", Date$
	ebContext.SetAttrib "SessionTime", Time$

	'Initialize global variables for packages
	InitGlobals c

	CreateDefaultPort

	If Basic.OS = ebWin32 Then
		WinActivate "E-Run Experiment Window"
	End If

	' Get the StartupInfo

	' Set the defaults for all of the StartupInfo
	If Not c.AttribExists("Subject") Then c.SetAttrib "Subject", "1"
	If Not c.AttribExists("Session") Then c.SetAttrib "Session", "1"
	If Not c.AttribExists("Name") Then c.SetAttrib "Name", ""
	If Not c.AttribExists("Age") Then c.SetAttrib "Age", "0"
	If Not c.AttribExists("Sex") Then c.SetAttrib "Sex", "female"
	If Not c.AttribExists("Handedness") Then c.SetAttrib "Handedness", "right"

	' Determine if StartupInfo.UseDefaults exists and is True/False to override prompts for StartupInfo parameters
	Dim bStartupInfoUseDefaults As Boolean
	bStartupInfoUseDefaults = False
	If c.AttribExists("StartupInfo.UseDefaults") Then bStartupInfoUseDefaults = CLogical(c.GetAttrib("StartupInfo.UseDefaults"))
	If Not bStartupInfoUseDefaults Then

		Dim vAnswer As Variant
StartupInfo_Begin:

StartupInfoPrompt_Subject:
		vAnswer = AskBox("Please enter the Subject Number (1-32767, 0=No Data Logging):", c.GetAttrib("Subject"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) < 0 Then
				MsgBox "The value for Subject must not be less than 0"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Subject must be not be greater than 32767"
				GoTo StartupInfoPrompt_Subject
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Subject", CStr(vAnswer)

StartupInfoPrompt_Session:
		vAnswer = AskBox("Please enter the Session Number (1-32767):", c.GetAttrib("Session"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) < 1 Then
				MsgBox "The value for Session must not be less than 1"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Session must be not be greater than 32767"
				GoTo StartupInfoPrompt_Session
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Session", CStr(vAnswer)

StartupInfoPrompt_Name:
		vAnswer = AskBox("Please enter Subject's Name:", c.GetAttrib("Name"))
		If Not IsEmpty(vAnswer) then
			If Len(CStr(vAnswer)) > 255 Then
			MsgBox "The length for Name must be not be greater than 255"
				GoTo StartupInfoPrompt_Name
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Name", CStr(vAnswer)

StartupInfoPrompt_Age:
		vAnswer = AskBox("Please enter Subject's Age (0-150):", c.GetAttrib("Age"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Age
			ElseIf CLng(vAnswer) < 0 Then
				MsgBox "The value for Age must not be less than 0"
				GoTo StartupInfoPrompt_Age
			ElseIf CLng(vAnswer) > 150 Then
				MsgBox "The value for Age must be not be greater than 150"
				GoTo StartupInfoPrompt_Age
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Age", CStr(vAnswer)

StartupInfoPrompt_Sex:
		Dim arrayChoicesSex(2)
		arrayChoicesSex(0) = "female"
		arrayChoicesSex(1) = "male"
		vAnswer = SelectBox(, "Please enter Subject's Sex:", arrayChoicesSex)
		If vAnswer >= 0 then
			c.SetAttrib "Sex", arrayChoicesSex(vAnswer)
		Else
			GoTo ExperimentAbort
		End If

StartupInfoPrompt_Handedness:
		Dim arrayChoicesHandedness(2)
		arrayChoicesHandedness(0) = "right"
		arrayChoicesHandedness(1) = "left"
		vAnswer = SelectBox(, "Enter Subject's Handedness:", arrayChoicesHandedness)
		If vAnswer >= 0 then
			c.SetAttrib "Handedness", arrayChoicesHandedness(vAnswer)
		Else
			GoTo ExperimentAbort
		End If

		' Display the summary
		Dim strSummary As String
		strSummary = "Subject:    " & c.GetAttrib("Subject") & "\n"
		strSummary = strSummary & "Session:    " & c.GetAttrib("Session") & "\n"
		strSummary = strSummary & "Name:    " & c.GetAttrib("Name") & "\n"
		strSummary = strSummary & "Age:    " & c.GetAttrib("Age") & "\n"
		strSummary = strSummary & "Sex:    " & c.GetAttrib("Sex") & "\n"
		strSummary = strSummary & "Handedness:    " & c.GetAttrib("Handedness") & "\n"
		strSummary = strSummary & "\nContinue with the above startup info?"

		Dim nSummaryAnswer As Integer
		nSummaryAnswer = MsgBox(strSummary, ebYesNoCancel + ebQuestion, "Summary of Startup Info")
		If nSummaryAnswer = ebNo Then
				GoTo StartupInfo_Begin
		ElseIf nSummaryAnswer = ebCancel Then
				GoTo ExperimentAbort
		End If

	End If


	'If the attribute Clock.Scale.Override exists
	'  then use it for to set the Clock.Scale value
	If c.AttribExists("Clock.Scale.Override") Then
		Clock.Scale = CDbl(c.GetAttrib("Clock.Scale.Override"))
	End If

	' Set the Filenames for the data files
	Dim strFilenameRecovery As String
	Dim strFilenameEDAT As String

	'If the attribute DataFile.Filename.Override exists
	'  then use it for the .txt and .edat filenames
	If c.AttribExists("DataFile.Filename.Override") Then

		' Set the default Data Filename
		strFilenameRecovery = CStr(c.GetAttrib("DataFile.Filename.Override")) & ".txt"
		strFilenameEDAT = CStr(c.GetAttrib("DataFile.Filename.Override")) & ".edat"

	Else

		' Set the default Data Filename
		strFilenameRecovery = CStr(c.GetAttrib("Experiment")) & "-" & CStr(c.GetAttrib("Subject")) & "-" & CStr(c.GetAttrib("Session")) & ".txt"
		strFilenameEDAT = CStr(c.GetAttrib("Experiment")) & "-" & CStr(c.GetAttrib("Subject")) & "-" & CStr(c.GetAttrib("Session")) & ".edat"

	End If

	'Set the name of the data file
	c.DataFile.Filename = strFilenameRecovery

	' If we are logging data, then prompt to overwrite the data file if it exists
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		If FileExists(c.DataFile.Filename) Or FileExists(strFilenameEDAT) Then
			If ebYes <> MsgBox("WARNING: The data file and/or recovery file already exists:\nFILE: " & c.DataFile.Filename & "\n\nDo you want to overwrite?", ebYesNo + ebQuestion) Then
				GoTo ExperimentAbort
			End If
		End If
	End If

	' Set defaults for RandomSeed and GroupNumber if StartupInfo did not assign their values
	If Not c.AttribExists("RandomSeed") Then c.SetAttrib "RandomSeed", PRNG.GetSeed()
	If Not c.AttribExists("Group") Then c.SetAttrib "Group", "1"

	'Set the random seed
	Randomize CLng(c.GetAttrib("RandomSeed"))

	' Initialize all system devices, packages, and objects
	InitDevices c
	InitPackages c
	InitObjects c

	' If we are logging data, then open the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Open
		c.LogHeader
	End If



#If RUNTIME_VERSION_MAJOR > 1  Or (RUNTIME_VERSION_MAJOR = 1 And RUNTIME_VERSION_MINOR >= 2) Then
	' Log clock timing information
	c.SetAttrib "Clock.Information", Clock.Information
#End If

	' Start the running of the Experiment
	SessionProc.Run c

	' Clean up the context and close the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Close
		' Attempt to convert the recovery file into a data file
		Dim nConvert As Long
		nConvert = c.DataFile.Convert(ebProgressSimple)
		If nConvert = 0 Then
			' Settings in E-Studio are set to not remove E-Recovery file
		Else
			' The datafile failed to convert!
			MsgBox "ERROR: The datafile did not convert!\nFILE: " & c.DataFile.Filename & "\n\nIt is recommended that you recover your data with the E-Recovery utility"
			MsgBox c.DataFile.GetLastErrorMessage()
		End If
	End If
ExperimentFinish:

	UnInitObjects

	UnInitPackages
	UnInitDevices

	UnInitGlobals

ExperimentAbort:

	' Clean up the context
	c.PopFrame
	Set c = Nothing
	Set ebContext = Nothing

	DestroyDefaultPort

End Sub


[DataSection_List1(1)]
Weight	Nested	Procedure	Essai	Lettre	StimGauche	StimDroit	TypeGauche	TypeDroite	TailleGauche	TailleDroite	CorrectAnswer
1		SessionTrial	1	a	a100	a100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	a	a110	a100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	a	a100	a110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	a	a110	a110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	a	a100	a100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	a	a100	a110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	a	a110	a100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	a	a110	a110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	a	ap100	a100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	a	ap110	a100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	a	ap100	a110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	a	ap110	a110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	a	a100	ap100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	a	a100	ap110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	a	a110	ap100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	a	a110	ap110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	a	as100	a100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	a	as110	a100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	a	as100	a110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	a	as110	a110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	a	a100	as100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	a	a100	as110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	a	a110	as100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	a	a110	as110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	c	c100	c100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	c	c110	c100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	c	c100	c110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	c	c110	c110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	c	c100	c100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	c	c100	c110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	c	c110	c100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	c	c110	c110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	c	cp100	c100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	c	cp110	c100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	c	cp100	c110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	c	cp110	c110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	c	c100	cp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	c	c100	cp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	c	c110	cp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	c	c110	cp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	c	cs100	c100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	c	cs110	c100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	c	cs100	c110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	c	cs110	c110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	c	c100	cs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	c	c100	cs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	c	c110	cs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	c	c110	cs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	e	e100	e100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	e	e110	e100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	e	e100	e110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	e	e110	e110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	e	e100	e100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	e	e100	e110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	e	e110	e100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	e	e110	e110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	e	ep100	e100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	e	ep110	e100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	e	ep100	e110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	e	ep110	e110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	e	e100	ep100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	e	e100	ep110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	e	e110	ep100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	e	e110	ep110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	e	es100	e100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	e	es110	e100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	e	es100	e110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	e	es110	e110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	e	e100	es100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	e	e100	es110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	e	e110	es100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	e	e110	es110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	m	m100	m100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	m	m110	m100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	m	m100	m110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	m	m110	m110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	m	m100	m100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	m	m100	m110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	m	m110	m100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	m	m110	m110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	m	mp100	m100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	m	mp110	m100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	m	mp100	m110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	m	mp110	m110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	m	m100	mp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	m	m100	mp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	m	m110	mp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	m	m110	mp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	m	ms100	m100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	m	ms110	m100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	m	ms100	m110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	m	ms110	m110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	m	m100	ms100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	m	m100	ms110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	m	m110	ms100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	m	m110	ms110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	r	r100	r100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	r	r110	r100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	r	r100	r110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	r	r110	r110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	r	r100	r100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	r	r100	r110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	r	r110	r100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	r	r110	r110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	r	rp100	r100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	r	rp110	r100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	r	rp100	r110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	r	rp110	r110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	r	r100	rp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	r	r100	rp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	r	r110	rp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	r	r110	rp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	r	rs100	r100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	r	rs110	r100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	r	rs100	r110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	r	rs110	r110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	r	r100	rs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	r	r100	rs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	r	r110	rs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	r	r110	rs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	s	s100	s100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	s	s110	s100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	s	s100	s110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	s	s110	s110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	s	s100	s100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	s	s100	s110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	s	s110	s100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	s	s110	s110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	s	sp100	s100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	s	sp110	s100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	s	sp100	s110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	s	sp110	s110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	s	s100	sp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	s	s100	sp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	s	s110	sp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	s	s110	sp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	s	ss100	s100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	s	ss110	s100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	s	ss100	s110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	s	ss110	s110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	s	s100	ss100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	s	s100	ss110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	s	s110	ss100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	s	s110	ss110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	v	v100	v100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	v	v110	v100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	v	v100	v110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	v	v110	v110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	v	v100	v100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	v	v100	v110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	v	v110	v100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	v	v110	v110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	v	vp100	v100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	v	vp110	v100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	v	vp100	v110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	v	vp110	v110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	v	v100	vp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	v	v100	vp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	v	v110	vp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	v	v110	vp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	v	vs100	v100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	v	vs110	v100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	v	vs100	v110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	v	vs110	v110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	v	v100	vs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	v	v100	vs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	v	v110	vs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	v	v110	vs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	w	w100	w100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	w	w110	w100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	w	w100	w110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	w	w110	w110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	w	w100	w100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	w	w100	w110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	w	w110	w100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	w	w110	w110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	w	wp100	w100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	w	wp110	w100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	w	wp100	w110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	w	wp110	w110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	w	w100	wp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	w	w100	wp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	w	w110	wp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	w	w110	wp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	w	ws100	w100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	w	ws110	w100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	w	ws100	w110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	w	ws110	w110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	w	w100	ws100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	w	w100	ws110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	w	w110	ws100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	w	w110	ws110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	1	z	z100	z100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	z	z110	z100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	z	z100	z110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	z	z110	z110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	z	z100	z100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	z	z100	z110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	z	z110	z100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	z	z110	z110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	z	zp100	z100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	z	zp110	z100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	z	zp100	z110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	z	zp110	z110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	z	z100	zp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	1	z	z100	zp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	1	z	z110	zp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	1	z	z110	zp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	1	z	zs100	z100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	1	z	zs110	z100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	1	z	zs100	z110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	1	z	zs110	z110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	1	z	z100	zs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	1	z	z100	zs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	1	z	z110	zs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	1	z	z110	zs110	Lettre	Sym	110	110	{DOWNARROW}\0

[DataSection_List5(1)]
Weight	Nested	Procedure	Essai	Lettre	StimGauche	StimDroit	TypeCible	PosLettreRef	TailleRef	TailleCible	CorrectAnswer	Type
1		SessionTrialTraining	0	u	u100	u110	Training	droite	100	110	{RIGHTARROW}	Diff
1		SessionTrialTraining	0	n	n100	n110	Training	droite	100	110	{RIGHTARROW}	Diff
1		SessionTrialTraining	0	x	x100	x110	Training	droite	100	110	{RIGHTARROW}	Diff
1		SessionTrialTraining	0	u	u110	u100	Training	gauche	110	100	{LEFTARROW}	Diff
1		SessionTrialTraining	0	n	n110	n100	Training	gauche	110	100	{LEFTARROW}	Diff
1		SessionTrialTraining	0	x	x110	x100	Training	gauche	110	100	{LEFTARROW}	Diff
1		SessionTrialTraining	0	u	u100	u100	Training	gauche	100	100	{DOWNARROW}	Identique
1		SessionTrialTraining	0	u	u110	u110	Training	droite	110	110	{DOWNARROW}	Identique
1		SessionTrialTraining	0	n	n100	n100	Training	gauche	100	100	{DOWNARROW}	Identique
1		SessionTrialTraining	0	n	n110	n110	Training	droite	110	110	{DOWNARROW}	Identique
1		SessionTrialTraining	0	x	x100	x100	Training	gauche	100	100	{DOWNARROW}	Identique
1		SessionTrialTraining	0	x	x110	x110	Training	droite	110	110	{DOWNARROW}	Identique\0

[DataSection_List2(1)]
Weight	Nested	Procedure	Essai	Lettre	StimGauche	StimDroit	TypeGauche	TypeDroite	TailleGauche	TailleDroite	CorrectAnswer
1		SessionTrial	2	a	a100	a100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	a	a110	a100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	a	a100	a110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	a	a110	a110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	a	a100	a100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	a	a100	a110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	a	a110	a100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	a	a110	a110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	a	ap100	a100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	a	ap110	a100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	a	ap100	a110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	a	ap110	a110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	a	a100	ap100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	a	a100	ap110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	a	a110	ap100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	a	a110	ap110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	a	as100	a100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	a	as110	a100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	a	as100	a110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	a	as110	a110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	a	a100	as100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	a	a100	as110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	a	a110	as100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	a	a110	as110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	c	c100	c100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	c	c110	c100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	c	c100	c110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	c	c110	c110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	c	c100	c100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	c	c100	c110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	c	c110	c100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	c	c110	c110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	c	cp100	c100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	c	cp110	c100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	c	cp100	c110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	c	cp110	c110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	c	c100	cp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	c	c100	cp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	c	c110	cp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	c	c110	cp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	c	cs100	c100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	c	cs110	c100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	c	cs100	c110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	c	cs110	c110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	c	c100	cs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	c	c100	cs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	c	c110	cs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	c	c110	cs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	e	e100	e100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	e	e110	e100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	e	e100	e110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	e	e110	e110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	e	e100	e100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	e	e100	e110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	e	e110	e100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	e	e110	e110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	e	ep100	e100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	e	ep110	e100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	e	ep100	e110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	e	ep110	e110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	e	e100	ep100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	e	e100	ep110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	e	e110	ep100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	e	e110	ep110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	e	es100	e100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	e	es110	e100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	e	es100	e110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	e	es110	e110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	e	e100	es100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	e	e100	es110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	e	e110	es100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	e	e110	es110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	m	m100	m100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	m	m110	m100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	m	m100	m110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	m	m110	m110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	m	m100	m100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	m	m100	m110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	m	m110	m100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	m	m110	m110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	m	mp100	m100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	m	mp110	m100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	m	mp100	m110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	m	mp110	m110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	m	m100	mp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	m	m100	mp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	m	m110	mp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	m	m110	mp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	m	ms100	m100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	m	ms110	m100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	m	ms100	m110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	m	ms110	m110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	m	m100	ms100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	m	m100	ms110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	m	m110	ms100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	m	m110	ms110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	r	r100	r100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	r	r110	r100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	r	r100	r110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	r	r110	r110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	r	r100	r100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	r	r100	r110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	r	r110	r100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	r	r110	r110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	r	rp100	r100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	r	rp110	r100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	r	rp100	r110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	r	rp110	r110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	r	r100	rp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	r	r100	rp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	r	r110	rp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	r	r110	rp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	r	rs100	r100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	r	rs110	r100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	r	rs100	r110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	r	rs110	r110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	r	r100	rs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	r	r100	rs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	r	r110	rs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	r	r110	rs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	s	s100	s100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	s	s110	s100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	s	s100	s110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	s	s110	s110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	s	s100	s100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	s	s100	s110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	s	s110	s100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	s	s110	s110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	s	sp100	s100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	s	sp110	s100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	s	sp100	s110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	s	sp110	s110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	s	s100	sp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	s	s100	sp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	s	s110	sp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	s	s110	sp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	s	ss100	s100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	s	ss110	s100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	s	ss100	s110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	s	ss110	s110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	s	s100	ss100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	s	s100	ss110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	s	s110	ss100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	s	s110	ss110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	v	v100	v100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	v	v110	v100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	v	v100	v110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	v	v110	v110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	v	v100	v100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	v	v100	v110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	v	v110	v100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	v	v110	v110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	v	vp100	v100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	v	vp110	v100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	v	vp100	v110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	v	vp110	v110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	v	v100	vp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	v	v100	vp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	v	v110	vp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	v	v110	vp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	v	vs100	v100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	v	vs110	v100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	v	vs100	v110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	v	vs110	v110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	v	v100	vs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	v	v100	vs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	v	v110	vs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	v	v110	vs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	w	w100	w100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	w	w110	w100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	w	w100	w110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	w	w110	w110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	w	w100	w100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	w	w100	w110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	w	w110	w100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	w	w110	w110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	w	wp100	w100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	w	wp110	w100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	w	wp100	w110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	w	wp110	w110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	w	w100	wp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	w	w100	wp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	w	w110	wp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	w	w110	wp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	w	ws100	w100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	w	ws110	w100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	w	ws100	w110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	w	ws110	w110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	w	w100	ws100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	w	w100	ws110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	w	w110	ws100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	w	w110	ws110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	2	z	z100	z100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	z	z110	z100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	z	z100	z110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	z	z110	z110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	z	z100	z100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	z	z100	z110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	z	z110	z100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	z	z110	z110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	z	zp100	z100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	z	zp110	z100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	z	zp100	z110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	z	zp110	z110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	z	z100	zp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	2	z	z100	zp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	2	z	z110	zp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	2	z	z110	zp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	2	z	zs100	z100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	2	z	zs110	z100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	2	z	zs100	z110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	2	z	zs110	z110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	2	z	z100	zs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	2	z	z100	zs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	2	z	z110	zs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	2	z	z110	zs110	Lettre	Sym	110	110	{DOWNARROW}\0

[DataSection_List3(1)]
Weight	Nested	Procedure	Essai	Lettre	StimGauche	StimDroit	TypeGauche	TypeDroite	TailleGauche	TailleDroite	CorrectAnswer
1		SessionTrial	3	a	a100	a100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	a	a110	a100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	a	a100	a110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	a	a110	a110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	a	a100	a100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	a	a100	a110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	a	a110	a100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	a	a110	a110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	a	ap100	a100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	a	ap110	a100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	a	ap100	a110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	a	ap110	a110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	a	a100	ap100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	a	a100	ap110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	a	a110	ap100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	a	a110	ap110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	a	as100	a100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	a	as110	a100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	a	as100	a110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	a	as110	a110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	a	a100	as100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	a	a100	as110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	a	a110	as100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	a	a110	as110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	c	c100	c100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	c	c110	c100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	c	c100	c110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	c	c110	c110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	c	c100	c100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	c	c100	c110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	c	c110	c100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	c	c110	c110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	c	cp100	c100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	c	cp110	c100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	c	cp100	c110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	c	cp110	c110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	c	c100	cp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	c	c100	cp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	c	c110	cp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	c	c110	cp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	c	cs100	c100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	c	cs110	c100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	c	cs100	c110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	c	cs110	c110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	c	c100	cs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	c	c100	cs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	c	c110	cs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	c	c110	cs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	e	e100	e100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	e	e110	e100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	e	e100	e110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	e	e110	e110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	e	e100	e100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	e	e100	e110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	e	e110	e100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	e	e110	e110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	e	ep100	e100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	e	ep110	e100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	e	ep100	e110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	e	ep110	e110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	e	e100	ep100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	e	e100	ep110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	e	e110	ep100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	e	e110	ep110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	e	es100	e100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	e	es110	e100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	e	es100	e110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	e	es110	e110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	e	e100	es100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	e	e100	es110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	e	e110	es100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	e	e110	es110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	m	m100	m100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	m	m110	m100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	m	m100	m110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	m	m110	m110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	m	m100	m100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	m	m100	m110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	m	m110	m100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	m	m110	m110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	m	mp100	m100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	m	mp110	m100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	m	mp100	m110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	m	mp110	m110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	m	m100	mp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	m	m100	mp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	m	m110	mp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	m	m110	mp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	m	ms100	m100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	m	ms110	m100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	m	ms100	m110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	m	ms110	m110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	m	m100	ms100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	m	m100	ms110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	m	m110	ms100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	m	m110	ms110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	r	r100	r100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	r	r110	r100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	r	r100	r110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	r	r110	r110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	r	r100	r100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	r	r100	r110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	r	r110	r100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	r	r110	r110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	r	rp100	r100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	r	rp110	r100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	r	rp100	r110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	r	rp110	r110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	r	r100	rp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	r	r100	rp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	r	r110	rp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	r	r110	rp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	r	rs100	r100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	r	rs110	r100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	r	rs100	r110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	r	rs110	r110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	r	r100	rs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	r	r100	rs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	r	r110	rs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	r	r110	rs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	s	s100	s100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	s	s110	s100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	s	s100	s110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	s	s110	s110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	s	s100	s100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	s	s100	s110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	s	s110	s100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	s	s110	s110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	s	sp100	s100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	s	sp110	s100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	s	sp100	s110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	s	sp110	s110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	s	s100	sp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	s	s100	sp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	s	s110	sp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	s	s110	sp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	s	ss100	s100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	s	ss110	s100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	s	ss100	s110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	s	ss110	s110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	s	s100	ss100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	s	s100	ss110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	s	s110	ss100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	s	s110	ss110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	v	v100	v100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	v	v110	v100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	v	v100	v110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	v	v110	v110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	v	v100	v100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	v	v100	v110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	v	v110	v100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	v	v110	v110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	v	vp100	v100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	v	vp110	v100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	v	vp100	v110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	v	vp110	v110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	v	v100	vp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	v	v100	vp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	v	v110	vp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	v	v110	vp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	v	vs100	v100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	v	vs110	v100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	v	vs100	v110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	v	vs110	v110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	v	v100	vs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	v	v100	vs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	v	v110	vs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	v	v110	vs110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	w	w100	w100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	w	w110	w100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	w	w100	w110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	w	w110	w110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	w	w100	w100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	w	w100	w110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	w	w110	w100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	w	w110	w110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	w	wp100	w100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	w	wp110	w100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	w	wp100	w110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	w	wp110	w110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	w	w100	wp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	w	w100	wp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	w	w110	wp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	w	w110	wp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	w	ws100	w100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	w	ws110	w100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	w	ws100	w110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	w	ws110	w110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	w	w100	ws100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	w	w100	ws110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	w	w110	ws100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	w	w110	ws110	Lettre	Sym	110	110	{DOWNARROW}
1		SessionTrial	3	z	z100	z100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	z	z110	z100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	z	z100	z110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	z	z110	z110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	z	z100	z100	Lettre	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	z	z100	z110	Lettre	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	z	z110	z100	Lettre	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	z	z110	z110	Lettre	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	z	zp100	z100	Pseudo	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	z	zp110	z100	Pseudo	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	z	zp100	z110	Pseudo	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	z	zp110	z110	Pseudo	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	z	z100	zp100	Lettre	Pseudo	100	100	{DOWNARROW}
1		SessionTrial	3	z	z100	zp110	Lettre	Pseudo	100	110	{RIGHTARROW}
1		SessionTrial	3	z	z110	zp100	Lettre	Pseudo	110	100	{LEFTARROW}
1		SessionTrial	3	z	z110	zp110	Lettre	Pseudo	110	110	{DOWNARROW}
1		SessionTrial	3	z	zs100	z100	Sym	Lettre	100	100	{DOWNARROW}
1		SessionTrial	3	z	zs110	z100	Sym	Lettre	110	100	{LEFTARROW}
1		SessionTrial	3	z	zs100	z110	Sym	Lettre	100	110	{RIGHTARROW}
1		SessionTrial	3	z	zs110	z110	Sym	Lettre	110	110	{DOWNARROW}
1		SessionTrial	3	z	z100	zs100	Lettre	Sym	100	100	{DOWNARROW}
1		SessionTrial	3	z	z100	zs110	Lettre	Sym	100	110	{RIGHTARROW}
1		SessionTrial	3	z	z110	zs100	Lettre	Sym	110	100	{LEFTARROW}
1		SessionTrial	3	z	z110	zs110	Lettre	Sym	110	110	{DOWNARROW}\0